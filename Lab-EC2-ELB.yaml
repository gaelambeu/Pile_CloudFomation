AWSTemplateFormatVersion: 2010-09-09
Description: Lab template
###############################
# Definition of Parameters   ##
###############################
# Lab VPC with public subnet and Internet Gateway
Parameters:
  InstanceType: 
    Type: String
    Default: t2.micro
    Description: Select Type of Instance
    ConstraintDescription: Must be valid EC2 Instance
    AllowedValues:
      - t1.micro
      - t1.nano
      - t2.micro
      - t2.nano
      - t3.micro
      - t3.nano
      - t4.large
      - m2.large
      - m2.xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - c4.large
      - c4.xlarge

  #KeyName Parameters
  KeyName:
      Description: KeyPairName
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: Must be valid Key Paire
    
  #VPC Parameters
  LabVpcCidr:
    Type: String
    Default: 10.0.0.0/20
  
  #Public Subnet1 Parameters
  PublicSubnetACidr:
    Type: String
    Default: 10.0.1.0/24
  
  #Public Subnet2 Parameters
  PublicSubnetBCidr:
    Type: String
    Default: 10.0.2.0/24
  
  #AMI Parameters
  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

###########
# Resoucres (Calcul, Networking and Load Balancer)
###########

###############################
#  Create EC2 INSTANCE       ##
###############################
Resources:

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          chmod 777 /var/www/html -R
          echo "<h1>Hello SESSION3 AWS from AZ us-east-2b</h1>" > /var/www/html/index.html
      Tags:
        - Key: project
          Value: cloud
        - Key: Name
          Value: Lab_EC2_V1
  
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonLinuxAMIID
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          chmod 777 /var/www/html -R
          echo "<h1>Hello SESSION3 AWS from AZ us-east-2b</h1>" > /var/www/html/index.html
      Tags:
        - Key: project
          Value: cloud
        - Key: Name
          Value: Lab_EC2_V2

###################################
#  Create VIRTUAL PRIVATE CLOUD  ##
###################################
  #Create VPC
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC
  #Create Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW
  #Attach Internet Gateway to VPC
  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - LabVPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref LabVPC

###########
# Public Route Table
###########
  #Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table
  
  #Modify Public Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Public Subnet
###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetACidr
      AvailabilityZone: us-east-1a
     # AvailabilityZone: !Select 
     #   - 0
     #   - !GetAZs 
     #     Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet DevA
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetBCidr
      AvailabilityZone: us-east-1b
     # AvailabilityZone: !Select 
     #   - 0
     #   - !GetAZs 
     #     Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet DevB
  
  #Associate Public Subnet1 with Public Route Table
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  #Associate Public Subnet2 with Public Route Table
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2



#################################
# EC2 and ALB Security Group   ##
#################################

  #ALB Security Groups
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  #EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access Security Group
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  # Target Group, Listener and Application  Load Balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '50'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      - Id: !Ref EC2Instance2
        Port: 80
      UnhealthyThresholdCount: 5
      VpcId: !Ref LabVPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId

###########
# Outputs
###########

  # Outputs:
   #  LabVPCDefaultSecurityGroup:
    #   Value: !Sub ${LabVPC.DefaultSecurityGroup}